<VisualMicro>
  <Program Name="eeprom_write" Ext=".ino" Location="d:\Users\pbecc\OneDrive\Arduino\ESP32_OpenSprinkler\EEPROM\examples\eeprom_write">
    <Compile ReCompileIfSourceIsNewer="1" IsDebugStart="1" IsGdb="0" CompilerErrors="0" ConfigurationName="Debug" UseConfigurationNameInBuildFolder="True" StopOnError="False" OptimiseLibs="True" OptimiseCore="True" BuildPath="d:\Users\pbecc\AppData\Local\Temp\VMBuilds\eeprom_write\espressif_esp32\Debug" SketchName="eeprom_write" ReportDigitalPins="0" ReportAnalogPins="0" ReportI2C="0" ReportFreeMemory="0" IncludeDebug="1" LastDebugPreProcessorDefinitions="VM_DEBUG;VM_DEBUG_ENABLE 1;VM_DEBUG_BANDWIDTH_THROTTLE_MS 100;VM_DEBUGGER_TYPE_HARDWARESERIAL 0;VM_DEBUGGER_TYPE_SOFTWARESERIAL 1;VM_DEBUGGER_TYPE_FASTSERIAL 2;VM_DEBUGGER_TYPE_USB 3;VM_DEBUGGER_TYPE_TEENSY 4;VM_DEBUGGER_TYPE_UART 5;VM_DEBUGGER_TYPE_USART 6;VM_DEBUGGER_TYPE_USBSERIAL 7;VM_DEBUGGER_TYPE_TTYUART 8;VM_DEBUGGER_TYPE_NET_CONSOLE 9;VM_DEBUGGER_TYPE_Uart 10;VM_DEBUGGER_TYPE_COSA 11;VM_DEBUGGER_TYPE_CDCSerialClass 12;VM_DEBUGGER_TYPE_HARDWARESERIAL1 13;VM_DEBUGGER_TYPE_HARDWARESERIAL2 14;VM_DEBUGGER_TYPE_HARDWARESERIAL3 15;VM_DEBUGGER_TYPE_NET_UDP 16;VM_DEBUGGER_TYPE_USBAPI 17;VM_DEBUGGER_TYPE_SERIALUSB 18;VM_DEBUGGER_TYPE VM_DEBUGGER_TYPE_HARDWARESERIAL;VM_DEBUG_BREAKPAUSE;" IncludesDebug="1" IsCompiled="1" />
    <Platform Name="arduino16x" Package="espressif" Platform="esp32" Architecture="xtensa-esp32-elf">
      <Board Name="espressif_esp32" Description="ESP32 Dev Module" CoreFolder="d:\Program Files\Arduino\hardware\espressif\esp32\cores\esp32" VariantFullPath="d:\Program Files\Arduino\hardware\espressif\esp32\variants\esp32" McuIdePath="d:\Program Files\Arduino" McuSketchBookPath="d:\Users\pbecc\OneDrive\Arduino" name="ESP32 Dev Module" upload.tool="esptool" upload.maximum_size="1310720" upload.maximum_data_size="294912" upload.wait_for_upload_port="true" serial.disableDTR="true" serial.disableRTS="true" build.mcu="esp32" build.core="esp32" build.variant="esp32" build.board="ESP32_DEV" build.f_cpu="240000000L" build.flash_mode="dio" build.flash_size="4MB" menu.FlashFreq.80="80MHz" menu.FlashFreq.80.build.flash_freq="80m" menu.FlashFreq.40="40MHz" menu.FlashFreq.40.build.flash_freq="40m" menu.UploadSpeed.921600="921600" menu.UploadSpeed.921600.upload.speed="921600" menu.UploadSpeed.115200="115200" menu.UploadSpeed.115200.upload.speed="115200" menu.UploadSpeed.256000.windows="256000" menu.UploadSpeed.256000.upload.speed="256000" menu.UploadSpeed.230400.windows.upload.speed="256000" menu.UploadSpeed.230400="230400" menu.UploadSpeed.230400.upload.speed="230400" menu.UploadSpeed.460800.linux="460800" menu.UploadSpeed.460800.macosx="460800" menu.UploadSpeed.460800.upload.speed="460800" menu.UploadSpeed.512000.windows="512000" menu.UploadSpeed.512000.upload.speed="512000" menu.DebugLevel.none="None" menu.DebugLevel.none.build.code_debug="0" menu.DebugLevel.error="Error" menu.DebugLevel.error.build.code_debug="1" menu.DebugLevel.warn="Warn" menu.DebugLevel.warn.build.code_debug="2" menu.DebugLevel.info="Info" menu.DebugLevel.info.build.code_debug="3" menu.DebugLevel.debug="Debug" menu.DebugLevel.debug.build.code_debug="4" menu.DebugLevel.verbose="Verbose" menu.DebugLevel.verbose.build.code_debug="5" menu.UploadSpeed.256000="256000" menu.UploadSpeed.512000="512000" runtime.ide.path="d:\Program Files\Arduino" runtime.os="windows" build.system.path="d:\Program Files\Arduino\hardware\espressif\esp32\system" runtime.ide.version="10801" target_package="espressif" target_platform="esp32" runtime.hardware.path="d:\Program Files\Arduino\hardware\espressif" originalid="esp32" intellisense.tools.path="{compiler.toolchain.path}" intellisense.include.paths="{runtime.tools.xtensa-lx106-elf-gcc.path}\xtensa-lx106-elf\include\c++\4.8.2;{runtime.tools.xtensa-lx106-elf-gcc.path}\xtensa-lx106-elf\include\c++\4.8.2\xtensa-lx106-elf;{runtime.tools.xtensa-lx106-elf-gcc.path}\xtensa-lx106-elf\include;{runtime.tools.xtensa-lx106-elf-gcc.path}\lib\gcc\xtensa-lx106-elf\4.8.2\include;{runtime.platform.path}\tools\sdk\include" tools.wwwfiles.name="ESP8266 Sketch Data Upload" tools.wwwfiles.ssh="false" tools.wwwfiles.cmd.windows="ESP8266FSUpload.exe" recipe.wwwfiles.upload.pattern="&quot;{vm.path}/{tools.wwwfiles.cmd}&quot; -serial.port={serial.port} -build.path=&quot;{build.path}&quot; -target_platform=&quot;{target_platform}&quot; -runtime.tools.mkspiffs.path=&quot;{runtime.tools.mkspiffs.path}&quot; -board.name=&quot;{name}&quot; -upload.verbose={upload.verbose} -upload.resetmethod={upload.resetmethod} -upload.speed={upload.speed}  -platform.path=&quot;{platform.path}&quot; -project.name=&quot;{project.name}&quot; -project.path=&quot;{project.path}&quot; -tools.esptool.cmd=&quot;{tools.esptool.cmd}&quot; -runtime.tools.esptool.path=&quot;{runtime.tools.esptool.path}&quot; -compiler.path=&quot;{compiler.path}&quot; -build.spiffs_start=&quot;{build.spiffs_start}&quot; -build.spiffs_end=&quot;{build.spiffs_end}&quot; -build.spiffs_pagesize=&quot;{build.spiffs_pagesize}&quot; -build.spiffs_blocksize=&quot;{build.spiffs_blocksize}&quot; -network.password={network.password} -network.auth_upload={network.auth_upload} -network.port={network.port}" tools.wwwfiles.cmd="ESP8266FSUpload.exe" version="0.0.1" runtime.tools.xtensa-esp32-elf-gcc.path="{runtime.platform.path}/tools/xtensa-esp32-elf" tools.esptool.cmd="&quot;{runtime.platform.path}/tools/esptool.exe&quot;" tools.esptool.cmd.linux="python &quot;{runtime.platform.path}/tools/esptool.py&quot;" tools.esptool.cmd.windows="&quot;{runtime.platform.path}/tools/esptool.exe&quot;" tools.esptool.network_cmd="&quot;{runtime.platform.path}/tools/espota.exe&quot;" tools.esptool.network_cmd.windows="&quot;{runtime.platform.path}/tools/espota.exe&quot;" tools.gen_esp32part.cmd="&quot;{runtime.platform.path}/tools/gen_esp32part.exe&quot;" tools.gen_esp32part.cmd.windows="&quot;{runtime.platform.path}/tools/gen_esp32part.exe&quot;" compiler.warning_flags="-w" compiler.warning_flags.none="-w" compiler.warning_flags.default="" compiler.warning_flags.more="-Wall -Werror=all" compiler.warning_flags.all="-Wall -Werror=all -Wextra" compiler.path="{runtime.tools.xtensa-esp32-elf-gcc.path}/bin/" compiler.sdk.path="{runtime.platform.path}/tools/sdk" compiler.cpreprocessor.flags="-DESP_PLATFORM -DMBEDTLS_CONFIG_FILE=&quot;mbedtls/esp_config.h&quot; -DHAVE_CONFIG_H &quot;-I{compiler.sdk.path}/include/config&quot; &quot;-I{compiler.sdk.path}/include/bluedroid&quot; &quot;-I{compiler.sdk.path}/include/app_update&quot; &quot;-I{compiler.sdk.path}/include/bootloader_support&quot; &quot;-I{compiler.sdk.path}/include/bt&quot; &quot;-I{compiler.sdk.path}/include/driver&quot; &quot;-I{compiler.sdk.path}/include/esp32&quot; &quot;-I{compiler.sdk.path}/include/ethernet&quot; &quot;-I{compiler.sdk.path}/include/fatfs&quot; &quot;-I{compiler.sdk.path}/include/freertos&quot; &quot;-I{compiler.sdk.path}/include/jsmn&quot; &quot;-I{compiler.sdk.path}/include/log&quot; &quot;-I{compiler.sdk.path}/include/mdns&quot; &quot;-I{compiler.sdk.path}/include/mbedtls&quot; &quot;-I{compiler.sdk.path}/include/mbedtls_port&quot; &quot;-I{compiler.sdk.path}/include/newlib&quot; &quot;-I{compiler.sdk.path}/include/nvs_flash&quot; &quot;-I{compiler.sdk.path}/include/openssl&quot; &quot;-I{compiler.sdk.path}/include/soc&quot; &quot;-I{compiler.sdk.path}/include/spi_flash&quot; &quot;-I{compiler.sdk.path}/include/sdmmc&quot; &quot;-I{compiler.sdk.path}/include/tcpip_adapter&quot; &quot;-I{compiler.sdk.path}/include/ulp&quot; &quot;-I{compiler.sdk.path}/include/vfs&quot; &quot;-I{compiler.sdk.path}/include/wear_levelling&quot; &quot;-I{compiler.sdk.path}/include/xtensa-debug-module&quot; &quot;-I{compiler.sdk.path}/include/newlib&quot; &quot;-I{compiler.sdk.path}/include/coap&quot; &quot;-I{compiler.sdk.path}/include/wpa_supplicant&quot; &quot;-I{compiler.sdk.path}/include/expat&quot; &quot;-I{compiler.sdk.path}/include/json&quot; &quot;-I{compiler.sdk.path}/include/nghttp&quot; &quot;-I{compiler.sdk.path}/include/lwip&quot;" compiler.c.cmd="xtensa-esp32-elf-gcc" compiler.c.flags="-std=gnu99 -Os -g3 -ffunction-sections -fdata-sections -fstrict-volatile-bitfields -mlongcalls -nostdlib -Wpointer-arith {compiler.warning_flags} -Wno-error=unused-function -Wno-error=unused-but-set-variable -Wno-error=unused-variable -Wno-error=deprecated-declarations -Wno-unused-parameter -Wno-sign-compare -Wno-old-style-declaration -MMD -c" compiler.cpp.cmd="xtensa-esp32-elf-g++" compiler.cpp.flags="-std=gnu++11 -fno-exceptions -fno-rtti -Os -g3 -Wpointer-arith -ffunction-sections -fdata-sections -fstrict-volatile-bitfields -mlongcalls -nostdlib {compiler.warning_flags} -Wno-error=unused-function -Wno-error=unused-but-set-variable -Wno-error=unused-variable -Wno-error=deprecated-declarations -Wno-unused-parameter -Wno-sign-compare -fno-rtti -MMD -c" compiler.S.cmd="xtensa-esp32-elf-gcc" compiler.S.flags="-c -g3 -x assembler-with-cpp -MMD -mlongcalls" compiler.c.elf.cmd="xtensa-esp32-elf-gcc" compiler.c.elf.flags="-nostdlib &quot;-L{compiler.sdk.path}/lib&quot; &quot;-L{compiler.sdk.path}/ld&quot; -T esp32_out.ld -T esp32.common.ld -T esp32.rom.ld -T esp32.peripherals.ld -u call_user_start_cpu0 -Wl,--gc-sections -Wl,-static -Wl,--undefined=uxTopUsedPriority" compiler.c.elf.libs="-lgcc -lstdc++ -lapp_update -lbootloader_support -lbt -lbtdm_app -lc -lc_nano -lcoap -lcoexist -lcore -lcxx -ldriver -lesp32 -lethernet -lexpat -lfatfs -lfreertos -lhal -ljsmn -ljson -llog -llwip -lm -lmbedtls -lmdns -lmicro-ecc -lnet80211 -lnewlib -lnghttp -lnvs_flash -lopenssl -lphy -lpp -lrtc -lsdmmc -lsmartconfig -lsoc -lspi_flash -ltcpip_adapter -lulp -lvfs -lwear_levelling -lwpa -lwpa2 -lwpa_supplicant -lwps -lxtensa-debug-module" compiler.as.cmd="xtensa-esp32-elf-as" compiler.ar.cmd="xtensa-esp32-elf-ar" compiler.ar.flags="cru" compiler.size.cmd="xtensa-esp32-elf-size" build.code_debug="5" build.extra_flags="-DESP32 -DCORE_DEBUG_LEVEL={build.code_debug}" compiler.c.extra_flags="" compiler.c.elf.extra_flags="" compiler.S.extra_flags="" compiler.cpp.extra_flags="" compiler.ar.extra_flags="" compiler.objcopy.eep.extra_flags="" compiler.elf2hex.extra_flags="" recipe.c.o.pattern="&quot;{compiler.path}{compiler.c.cmd}&quot; {compiler.cpreprocessor.flags} {compiler.c.flags} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.c.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" recipe.cpp.o.pattern="&quot;{compiler.path}{compiler.cpp.cmd}&quot; {compiler.cpreprocessor.flags} {compiler.cpp.flags} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" recipe.S.o.pattern="&quot;{compiler.path}{compiler.c.cmd}&quot; {compiler.cpreprocessor.flags} {compiler.S.flags} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.c.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" recipe.ar.pattern="&quot;{compiler.path}{compiler.ar.cmd}&quot; {compiler.ar.flags} {compiler.ar.extra_flags} &quot;{archive_file_path}&quot; &quot;{object_file}&quot;" recipe.c.combine.pattern="&quot;{compiler.path}{compiler.c.elf.cmd}&quot; {compiler.c.elf.flags} {compiler.c.elf.extra_flags} -Wl,--start-group {object_files} &quot;{build.path}/{archive_file}&quot; {compiler.c.elf.libs} -Wl,--end-group -Wl,-EL -o &quot;{build.path}/{build.project_name}.elf&quot;" recipe.objcopy.eep.pattern="{tools.gen_esp32part.cmd} -q &quot;{runtime.platform.path}/tools/partitions/default.csv&quot; &quot;{build.path}/{build.project_name}.partitions.bin&quot;" recipe.objcopy.hex.pattern="{tools.esptool.cmd} --chip esp32 elf2image --flash_mode &quot;{build.flash_mode}&quot; --flash_freq &quot;{build.flash_freq}&quot; --flash_size &quot;{build.flash_size}&quot; -o &quot;{build.path}/{build.project_name}.bin&quot; &quot;{build.path}/{build.project_name}.elf&quot;" recipe.output.tmp_file="{build.project_name}.bin" recipe.output.save_file="{build.project_name}.{build.variant}.bin" recipe.size.pattern="&quot;{compiler.path}{compiler.size.cmd}&quot; -A &quot;{build.path}/{build.project_name}.elf&quot;" recipe.size.regex="^(?:\.iram0\.text|\.dram0\.text|\.flash\.text|\.dram0\.data|\.flash\.rodata|)\s+([0-9]+).*" recipe.size.regex.data="^(?:\.dram0\.data|\.dram0\.bss)\s+([0-9]+).*" tools.esptool.upload.protocol="esp32" tools.esptool.upload.params.verbose="" tools.esptool.upload.params.quiet="" tools.esptool.upload.pattern="{cmd} --chip esp32 --port &quot;{serial.port}&quot; --baud {upload.speed}  --before default_reset --after hard_reset write_flash -z --flash_freq {build.flash_freq} --flash_mode {build.flash_mode} --flash_size {build.flash_size} 0x1000 &quot;{runtime.platform.path}/tools/sdk/bin/bootloader.bin&quot; 0x8000 &quot;{build.path}/{build.project_name}.partitions.bin&quot; 0xe000 &quot;{runtime.platform.path}/tools/partitions/boot_app0.bin&quot; 0x10000 &quot;{build.path}/{build.project_name}.bin&quot;" tools.esptool.upload.network_pattern="{network_cmd} -i &quot;{serial.port}&quot; -p &quot;{network.port}&quot; &quot;--auth={network.password}&quot; -f &quot;{build.path}/{build.project_name}.bin&quot;" vm.platform.root.path="D:\Program Files\VisualStudio\Common7\IDE\Extensions\fov02sja.mj3\Micro Platforms\arduino16x" runtime.tools.arduinoOTA.path="d:\Program Files\Arduino\hardware\tools\avr" runtime.tools.arduinoOTA-1.0.0.path="d:\Program Files\Arduino\hardware\tools\avr" runtime.tools.avrdude.path="d:\Program Files\Arduino\hardware\tools\avr" runtime.tools.avrdude-6.3.0-arduino8.path="d:\Program Files\Arduino\hardware\tools\avr" runtime.tools.avr-gcc.path="d:\Program Files\Arduino\hardware\tools\avr" runtime.tools.avr-gcc-4.9.2-atmel3.5.3-arduino2.path="d:\Program Files\Arduino\hardware\tools\avr" runtime.tools.esptool.path="d:\Users\pbecc\AppData\Local\arduino15\packages\esp8266\tools\esptool\0.4.8" runtime.tools.esptool-0.4.8.path="d:\Users\pbecc\AppData\Local\arduino15\packages\esp8266\tools\esptool\0.4.8" runtime.tools.mkspiffs.path="d:\Users\pbecc\AppData\Local\arduino15\packages\esp8266\tools\mkspiffs\0.1.2" runtime.tools.mkspiffs-0.1.2.path="d:\Users\pbecc\AppData\Local\arduino15\packages\esp8266\tools\mkspiffs\0.1.2" runtime.tools.tools-avr.path="d:\Program Files\Arduino\hardware\tools\avr" runtime.tools.xtensa-lx106-elf-gcc.path="d:\Users\pbecc\AppData\Local\arduino15\packages\esp8266\tools\xtensa-lx106-elf-gcc\1.20.0-26-gb404fb9-2" runtime.tools.xtensa-lx106-elf-gcc-1.20.0-26-gb404fb9-2.path="d:\Users\pbecc\AppData\Local\arduino15\packages\esp8266\tools\xtensa-lx106-elf-gcc\1.20.0-26-gb404fb9-2" runtime.vm.boardinfo.id="espressif_esp32" runtime.vm.boardinfo.name="espressif_esp32" runtime.vm.boardinfo.desc="ESP32 Dev Module" runtime.vm.boardinfo.src_location="d:\Program Files\Arduino\hardware\espressif\esp32" ide.hint="Use installed IDE. Provides built-in hardware, reference/help and libraries." ide.location.key="Arduino16x" ide.location.ide.winreg="Arduino 1.6.x Application" ide.location.sketchbook.winreg="Arduino 1.6.x Sketchbook" ide.location.sketchbook.preferences="sketchbook.path" ide.default.revision_name="1.8.0" ide.default.version="10800" ide.default.package="arduino" ide.default.platform="avr" ide.multiplatform="true" ide.includes="Arduino.h" ide.exe_name="arduino" ide.platformswithoutpackage="false" ide.includes.fallback="wprogram.h" ide.extension="ino" ide.extension.fallback="pde" ide.versionGTEQ="160" ide.exe="arduino.exe" ide.hosts="atmel" ide.url="http://arduino.cc/en/Main/Software" ide.help.reference.path="reference" ide.help.reference.path2="reference\www.arduino.cc\en\Reference" ide.help.reference.serial="reference\www.arduino.cc\en\Serial" vm.debug="true" software="ARDUINO" ssh.user.name="root" ssh.user.default.password="arduino" ssh.host.wwwfiles.path="/www/sd" build.working_directory="{runtime.ide.path}\java\bin" ide.location.preferences.portable="{runtime.ide.path}\portable" ide.location.preferences.arduinoData="{runtime.sketchbook.path}\ArduinoData" ide.location.preferences="%VM_APPDATA_LOCAL%\arduino15\preferences.txt" ide.location.preferences_fallback="%VM_APPDATA_ROAMING%\arduino15\preferences.txt" ide.location.contributions="%VM_APPDATA_LOCAL%\arduino15" ide.location.contributions_fallback="%VM_APPDATA_ROAMING%\arduino15" ide.contributions.boards.allow="true" ide.contributions.boards.ignore_unless_rewrite_found="true" ide.contributions.libraries.allow="true" ide.contributions.boards.support.urls.wiki="https://github.com/arduino/Arduino/wiki/Unofficial-list-of-3rd-party-boards-support-urls" ide.create_platforms_from_boardsTXT.teensy="build.core" ide.appid="arduino16x" location.sketchbook="d:\Users\pbecc\OneDrive\Arduino" build.core.vmresolved="d:\Program Files\Arduino\hardware\espressif\esp32\cores\esp32" build.core.parentfolder.vmresolved="d:\Program Files\Arduino\hardware\espressif\esp32\cores" build.core.coresparentfolder.vmresolved="d:\Program Files\Arduino\hardware\espressif\esp32" build.core.path="d:\Program Files\Arduino\hardware\espressif\esp32\cores\esp32" vm.core.include="Arduino.h" vm.boardsource.path="d:\Program Files\Arduino\hardware\espressif\esp32" runtime.platform.path="d:\Program Files\Arduino\hardware\espressif\esp32" vm.platformname.name="esp32" build.arch="ESP32" upload.speed="921600" build.flash_freq="80m" build.architecture="xtensa-esp32-elf" vmresolved.compiler.path="d:\Program Files\Arduino\hardware\espressif\esp32\tools\xtensa-esp32-elf\bin\" vmresolved.tools.path="d:\Program Files\Arduino\hardware\espressif\esp32\tools\xtensa-esp32-elf" build.path="d:\Users\pbecc\AppData\Local\Temp\VMBuilds\eeprom_write\espressif_esp32\Debug" build.project_name="eeprom_write.ino" build.project_path="d:\Users\pbecc\OneDrive\Arduino\ESP32_OpenSprinkler\EEPROM\examples\eeprom_write" ProjectDir="d:\Users\pbecc\OneDrive\Arduino\ESP32_OpenSprinkler\EEPROM\examples\eeprom_write\" builder.noino="false" build.variant.vmresolved="d:\Program Files\Arduino\hardware\espressif\esp32\variants\esp32" vm.runtime.compiler.showwarnings="false" vm.runtime.upload.verbose="false" vm.runtime.upload.verify="false" serial.port.file="COM3" serial.port="COM3" serial.port.num="3" serial.port.caption="COM3   - USB-SERIAL CH340" serial.Caption="USB-SERIAL CH340 (COM3)" serial.ClassGuid="{4d36e978-e325-11ce-bfc1-08002be10318}" serial.CompatibleID.value0="USB\Class_FF" serial.ConfigManagerErrorCode="0" serial.ConfigManagerUserConfig="False" serial.CreationClassName="Win32_PnPEntity" serial.Description="USB-SERIAL CH340" serial.DeviceID="USB\VID_1A86&amp;PID_7523\6&amp;2E23191E&amp;0&amp;4" serial.HardwareID.value0="USB\VID_1A86&amp;PID_7523" serial.Manufacturer="wch.cn" serial.Name="USB-SERIAL CH340 (COM3)" serial.PNPClass="Ports" serial.PNPDeviceID="USB\VID_1A86&amp;PID_7523\6&amp;2E23191E&amp;0&amp;4" serial.Present="True" serial.Service="CH341SER" serial.Status="OK" serial.SystemCreationClassName="Win32_ComputerSystem" serial.SystemName="GHISA" serial.vid="0x1A86" serial.pid="0x7523" serial.iserial="6&amp;2E23191E&amp;0&amp;4" serial.port.iserial="6&amp;2E23191E&amp;0&amp;4" vm.runtime.compiler.auto_discover_includes="true" vm.runtime.compiler.auto_discover_includes_cache="true" build.vm.build.vmdebug="1" build.vm.build.isgdb="0" build.vm.build.optimised="1" vm.last.buildpath="d:\Users\pbecc\AppData\Local\Temp\VMBuilds\eeprom_write\espressif_esp32\Debug" />
    </Platform>
    <Debug EnableBreak="1" DebugEnabled="1" InBreakLiveView="1" PerfStats="1" IsGdb="0" RemotePortSpeedWrittenToDebugSource="115200" />
    <VCCodeModel>
      <VCCodeMacros />
    </VCCodeModel>
    <BreakPoints>
      <BreakPoint Index="1" Name="OpenSprinkler.cpp, riga 976" Id="acf0459e-9fba-442f-811e-a5b7e063fc04" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="d:\users\pbecc\onedrive\arduino\esp32_opensprinkler\opensprinkler.cpp" FileLine="976" FileColumn="1" FunctionName="begin()" FunctionLineOffset="139" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='acf0459e-9fba-442f-811e-a5b7e063fc04'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>969	    // detect if current sensing pin is present
970	    PINMODE ( PIN_CURR_DIGITAL, INPUT );
971	    digitalWrite ( PIN_CURR_DIGITAL, HIGH ); // enable internal pullup
972	    status.has_curr_sense = digitalRead ( PIN_CURR_DIGITAL ) ? 0 : 1;
973	    digitalWrite ( PIN_CURR_DIGITAL, LOW );
974	#endif
975	
--&gt;976	    lcd_start();
977	#ifndef LCD_SSD1306
978	    // define lcd custom icons
979	    byte _icon[8];
980	    // WiFi icon
981	    _icon[0] = B00000;
982	    _icon[1] = B10100;
983	    _icon[2] = B01000;
984	    _icon[3] = B10101;
985	    _icon[4] = B00001;
</Source>
      </BreakPoint>
      <BreakPoint Index="2" Name="OpenSprinkler.cpp, riga 2028" Id="853cc927-00b7-492f-9e56-fa85a5a5e151" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="d:\users\pbecc\onedrive\arduino\esp32_opensprinkler\opensprinkler.cpp" FileLine="2028" FileColumn="1" FunctionName="options_setup()" FunctionLineOffset="10" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='853cc927-00b7-492f-9e56-fa85a5a5e151'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>2021	    // add 0.25 second delay to allow nvm to stablize
2022	    delay ( 250 );
2023		
2024		int i = 0; char d;
2025		DEBUG_PRINTLN(DEFAULT_WEATHER_URL);
2026		DEBUG_PRINTLN(strlen(DEFAULT_WEATHER_URL));
2027		//while (d != 0) { d = eeprom_read_byte((byte*)ADDR_NVM_WEATHERURL + i++); DEBUG_PRINT(d); }
--&gt;2028	    byte curr_ver = nvm_read_byte ( ( byte* ) ( ADDR_NVM_OPTIONS+OPTION_FW_VERSION ) );
2029		DEBUG_PRINTLN((int)curr_ver);
2030	    // check reset condition: either firmware version has changed, or reset flag is up
2031	    // if so, trigger a factory reset
2032	    if ( curr_ver != OS_FW_VERSION || nvm_read_byte ( ( byte* ) ( ADDR_NVM_OPTIONS+OPTION_RESET ) ) ==0xAA )
2033	    {
2034	#if defined(ARDUINO)
2035	        lcd_print_line_clear_pgm ( PSTR ( "Resetting..." ), 0 );
2036	        lcd_print_line_clear_pgm ( PSTR ( "Please Wait..." ), 1 );
2037			DEBUG_PRINTLN("Reset EEPROM");
</Source>
      </BreakPoint>
      <BreakPoint Index="3" Name="OpenSprinkler.cpp, riga 2035" Id="17d15510-e81c-4767-9510-76206d1c94c0" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="d:\users\pbecc\onedrive\arduino\esp32_opensprinkler\opensprinkler.cpp" FileLine="2035" FileColumn="1" FunctionName="options_setup()" FunctionLineOffset="17" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='17d15510-e81c-4767-9510-76206d1c94c0'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>2028	    byte curr_ver = nvm_read_byte ( ( byte* ) ( ADDR_NVM_OPTIONS+OPTION_FW_VERSION ) );
2029		DEBUG_PRINTLN((int)curr_ver);
2030	    // check reset condition: either firmware version has changed, or reset flag is up
2031	    // if so, trigger a factory reset
2032	    if ( curr_ver != OS_FW_VERSION || nvm_read_byte ( ( byte* ) ( ADDR_NVM_OPTIONS+OPTION_RESET ) ) ==0xAA )
2033	    {
2034	#if defined(ARDUINO)
--&gt;2035	        lcd_print_line_clear_pgm ( PSTR ( "Resetting..." ), 0 );
2036	        lcd_print_line_clear_pgm ( PSTR ( "Please Wait..." ), 1 );
2037			DEBUG_PRINTLN("Reset EEPROM");
2038			write_message("Resetting to factory default!");
2039	#else
2040	        DEBUG_PRINT ( "Resetting Options..." );
2041	#endif
2042	        // ======== Reset NVM data ========
2043	        int i, sn;
2044	        // 0. wipe out nvm
</Source>
      </BreakPoint>
      <BreakPoint Index="4" Name="OpenSprinkler.cpp, riga 2056" Id="6a33b51d-7e0b-4d38-aa7e-0012bf156b2c" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="d:\users\pbecc\onedrive\arduino\esp32_opensprinkler\opensprinkler.cpp" FileLine="2056" FileColumn="1" FunctionName="options_setup()" FunctionLineOffset="38" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='6a33b51d-7e0b-4d38-aa7e-0012bf156b2c'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>2049				DEBUG_PRINT(' ');
2050				delay(100);
2051	            int nbytes = ( ( NVM_SIZE-i ) &gt;TMP_BUFFER_SIZE ) ?TMP_BUFFER_SIZE: ( NVM_SIZE-i );
2052	            nvm_write_block ( tmp_buffer, ( void* ) i, nbytes );
2053	        }
2054			DEBUG_PRINTLN("wiped");
2055	        // 1. write non-volatile controller status
--&gt;2056	        nvdata_save();
2057			DEBUG_PRINTLN("nvdata");
2058	        // 2. write string parameters
2059	        nvm_write_block ( DEFAULT_PASSWORD, ( void* ) ADDR_NVM_PASSWORD, strlen ( DEFAULT_PASSWORD )+1 );
2060	        nvm_write_block ( DEFAULT_LOCATION, ( void* ) ADDR_NVM_LOCATION, strlen ( DEFAULT_LOCATION )+1 );
2061	        nvm_write_block ( DEFAULT_JAVASCRIPT_URL, ( void* ) ADDR_NVM_JAVASCRIPTURL, strlen ( DEFAULT_JAVASCRIPT_URL )+1 );
2062			DEBUG_PRINT(char(eeprom_read_byte((byte*)ADDR_NVM_JAVASCRIPTURL + strlen(DEFAULT_JAVASCRIPT_URL) + 1)&amp;&amp;0x0F));
2063			DEBUG_PRINTLN(char(eeprom_read_byte((byte*)ADDR_NVM_JAVASCRIPTURL + strlen(DEFAULT_JAVASCRIPT_URL) + 2)&amp;&amp;0x0F));
2064			nvm_write_block ( DEFAULT_WEATHER_URL, ( void* ) ADDR_NVM_WEATHERURL, strlen ( DEFAULT_WEATHER_URL )+1 );
2065	        nvm_write_block ( DEFAULT_WEATHER_KEY, ( void* ) ADDR_NVM_WEATHER_KEY, strlen ( DEFAULT_WEATHER_KEY )+1 );
</Source>
      </BreakPoint>
      <BreakPoint Index="5" Name="OpenSprinkler.cpp, riga 2059" Id="c6a1322c-6a65-4b8e-a109-b38409955968" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="d:\users\pbecc\onedrive\arduino\esp32_opensprinkler\opensprinkler.cpp" FileLine="2059" FileColumn="1" FunctionName="options_setup()" FunctionLineOffset="41" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='c6a1322c-6a65-4b8e-a109-b38409955968'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>2052	            nvm_write_block ( tmp_buffer, ( void* ) i, nbytes );
2053	        }
2054			DEBUG_PRINTLN("wiped");
2055	        // 1. write non-volatile controller status
2056	        nvdata_save();
2057			DEBUG_PRINTLN("nvdata");
2058	        // 2. write string parameters
--&gt;2059	        nvm_write_block ( DEFAULT_PASSWORD, ( void* ) ADDR_NVM_PASSWORD, strlen ( DEFAULT_PASSWORD )+1 );
2060	        nvm_write_block ( DEFAULT_LOCATION, ( void* ) ADDR_NVM_LOCATION, strlen ( DEFAULT_LOCATION )+1 );
2061	        nvm_write_block ( DEFAULT_JAVASCRIPT_URL, ( void* ) ADDR_NVM_JAVASCRIPTURL, strlen ( DEFAULT_JAVASCRIPT_URL )+1 );
2062			DEBUG_PRINT(char(eeprom_read_byte((byte*)ADDR_NVM_JAVASCRIPTURL + strlen(DEFAULT_JAVASCRIPT_URL) + 1)&amp;&amp;0x0F));
2063			DEBUG_PRINTLN(char(eeprom_read_byte((byte*)ADDR_NVM_JAVASCRIPTURL + strlen(DEFAULT_JAVASCRIPT_URL) + 2)&amp;&amp;0x0F));
2064			nvm_write_block ( DEFAULT_WEATHER_URL, ( void* ) ADDR_NVM_WEATHERURL, strlen ( DEFAULT_WEATHER_URL )+1 );
2065	        nvm_write_block ( DEFAULT_WEATHER_KEY, ( void* ) ADDR_NVM_WEATHER_KEY, strlen ( DEFAULT_WEATHER_KEY )+1 );
2066	
2067	        // 3. reset station names and special attributes, default Sxx
2068	        tmp_buffer[0]='S';
</Source>
      </BreakPoint>
    </BreakPoints>
  </Program>
</VisualMicro>